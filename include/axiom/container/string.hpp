///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2024 Mallory SCOTTON
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma once
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <axiom/config.hpp>
#include <axiom/math/types.hpp>
#include <string>
#include <iostream>

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
#define SAFE_DELETE(x) { delete x; x = nullptr; }
#define SAFE_DELETE_ARRAY(x) { delete[] x; x = nullptr; }

///////////////////////////////////////////////////////////////////////////////
// Namespace ax::container
///////////////////////////////////////////////////////////////////////////////
namespace ax::container
{

// SECTION - String

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct String
{
public:
    // ANCHOR - Member Data

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static const Uint64 npos = -1;  //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    char* m_str = nullptr;          //<!
    Uint64 m_length = 0;            //<!
    Uint64 m_cap = 0;               //<!
    Uint64 m_increaseBy = 15;       //<!

protected:
    // SECTION - String Iterator

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct StringIterator
    {
    public:
        // ANCHOR - Member Data

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        char* first;        //<!
        const Uint64* size; //<!
        Uint64 pos;         //<!

    public:
        // ANCHOR - Constructors

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param first
        /// \param size
        /// \param pos;
        ///
        ///////////////////////////////////////////////////////////////////////
        StringIterator(char* first = nullptr, const Uint64* size = nullptr,
            Uint64 pos = 0);
    };

    // !SECTION

public:
    // SECTION - Const Iterator

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct ConstIterator
    {
    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        friend struct String;

    protected:
        // ANCHOR - Member Data

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        StringIterator current;     //<!

    public:
        // ANCHOR - Constructors

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param iterator
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator(StringIterator iterator);

    public:
        // ANCHOR - Operators

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](Int64 index) const;

    protected:
        // ANCHOR - Protected Methods

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        AXIOM_NODISCARD char& retrieve(void) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void _increment(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void _decrement(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param offset
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        AXIOM_NODISCARD char& _randomAccess(Uint64 offset) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param toReturn
        /// \param addition
        ///
        ///////////////////////////////////////////////////////////////////////
        void _add(ConstIterator& toReturn, Uint64 addition);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param toReturn
        /// \param subtraction
        ///
        ///////////////////////////////////////////////////////////////////////
        void _subtract(ConstIterator& toReturn, Uint64 substraction);
    };

    // !SECTION

    // SECTION - Iterator

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Iterator : public ConstIterator
    {
    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        friend struct String;

    public:
        // ANCHOR - Constructors

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param iterator
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator(StringIterator iterator);

    public:
        // ANCHOR - Operators

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        char& operator[](Int64 index);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](Int64 index) const;
    };

    // !SECTION

    // ANCHOR - Iterator Definition

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    using ConstPointer = ConstIterator;
    using Pointer = Iterator;

    // SECTION - Const Reverse Iterator

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct ConstReverseIterator : public ConstIterator
    {
    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        friend struct String;

    public:
        // ANCHOR - Constructors

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param iterator
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator(StringIterator iterator);

    public:
        // ANCHOR - Operators

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](Int64 index) const;

    protected:
        // ANCHOR - Protected Methods

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void _increment(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void _decrement(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param toReturn
        /// \param addition
        ///
        ///////////////////////////////////////////////////////////////////////
        void _add(ConstReverseIterator& toReturn, Uint64 addition);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param toReturn
        /// \param subtraction
        ///
        ///////////////////////////////////////////////////////////////////////
        void _subtract(ConstReverseIterator& toReturn, Uint64 subtraction);
    };

    // !SECTION

    // SECTION - Reverse Iterator

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct ReverseIterator : public ConstReverseIterator
    {
    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        friend struct String;

    public:
        // ANCHOR - Constructors

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param iterator
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator(StringIterator iterator);

    public:
        // ANCHOR - Operators

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        char& operator[](Int64 index);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](Int64 index) const;
    };

    // !SECTION

    // ANCHOR - Reverse Iterator Definition

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    using ConstReversePointer = ConstReverseIterator;
    using ReversePointer = ReverseIterator;

public:
    // ANCHOR - Constructors

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    String(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    String(const String& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    String(const String& other, Uint64 position, Uint64 length = npos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    String(String&& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    String(const char* other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    String(const char* other, Uint64 length);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param length
    /// \param filler
    ///
    ///////////////////////////////////////////////////////////////////////////
    String(Uint64 len, char filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    ///
    ///////////////////////////////////////////////////////////////////////////
    String(const ConstIterator first, const ConstIterator second);

public:
    // ANCHOR - Destructor

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~String(void);

public:
    // ANCHOR - Operators

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& operator=(const String& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& operator=(String&& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char& operator[](Uint64 index) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    char& operator[](Uint64 index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    operator std::string(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    operator const char*(void) const;

public:
    // SECTION - Public Methods

    // ANCHOR - Access

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator begin(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstIterator begin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstIterator cbegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ReverseIterator rbegin(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstReverseIterator rbegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstReverseIterator crbegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator end(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstIterator end(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstIterator cend(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ReverseIterator rend(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstReverseIterator rend(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstReverseIterator crend(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char& at(Uint64 index) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    char& at(Uint64 index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char& front(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    char& front(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char& back(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    char& back(void);

    // ANCHOR - Modification

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param str
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& append(const String& str);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param str
    /// \param subPos
    /// \param subLen
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& append(const String& str, Uint64 subPos, Uint64 subLen = npos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param str
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& append(const std::string& str);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param str
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& append(const char* str);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param str
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& append(const char* str, Uint64 length);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param length
    /// \param filler
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& append(Uint64 length, char filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& append(const ConstIterator first, const ConstIterator second);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ch
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& append(char ch);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& insert(Uint64 position, const String& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param other
    /// \param subPos
    /// \param subLen
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& insert(Uint64 position, const String& other, Uint64 subPos,
        Uint64 subLen);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& insert(Uint64 position, const std::string& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& insert(Uint64 position, const char* other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param other
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& insert(Uint64 position, const char* other, Uint64 length);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param character
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& insert(Uint64 position, char character);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    /// \param filler
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& insert(Uint64 position, Uint64 length, char filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pointer
    /// \param length
    /// \param filler
    ///
    ///////////////////////////////////////////////////////////////////////////
    void insert(Iterator pointer, Uint64 length, char filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pointer
    /// \param character
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator insert(Iterator pointer, char character);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pointer
    /// \param first
    /// \param second
    ///
    ///////////////////////////////////////////////////////////////////////////
    void insert(Iterator pointer, const ConstIterator first,
        const ConstIterator second);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& erase(Uint64 position = 0, Uint64 length = npos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pointer
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator erase(ConstIterator pointer);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator erase(ConstIterator first, ConstIterator second);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(Uint64 position, Uint64 length, const String& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(ConstIterator first, ConstIterator second,
        const String& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    /// \param other
    /// \param subPos
    /// \param subLen
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(Uint64 position, Uint64 length, const String& other,
        Uint64 subPos, Uint64 subLen = npos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(Uint64 position, Uint64 length, const char* other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(ConstIterator first, ConstIterator second,
        const char* other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    /// \param other
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(Uint64 position, Uint64 length, const char* other,
        Uint64 n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    /// \param other
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(ConstIterator first, ConstIterator second,
        const char* other, Uint64 n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(Uint64 position, const std::string& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(ConstIterator first, ConstIterator second,
        const std::string& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    /// \param filler
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(Uint64 poisition, Uint64 length, char filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    /// \param length
    /// \param filler
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(ConstIterator first, ConstIterator second, Uint64 length,
        char filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    /// \param third
    /// \param four
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& replace(ConstIterator first, ConstIterator second,
        ConstIterator third, ConstIterator four);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///
    ///////////////////////////////////////////////////////////////////////////
    void swap(String& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& popBack(void);

    // ANCHOR - C-String

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char* cstr(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param str
    /// \param len
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 copy(char* str, Uint64 len, Uint64 position = 0) const;

    // ANCHOR - Research

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 find(const String& other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 find(const std::string& other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 find(const char* other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 find(const char* other, Uint64 position, Uint64 length) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ch
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 find(char ch, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 rfind(const String& other, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 rfind(const std::string& other, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 rfind(const char* other, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 rfind(const char* other, Uint64 position, Uint64 length) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ch
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 rfind(char ch, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstOf(const String& other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstOf(const std::string& other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstOf(const char* other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstOf(const char* other, Uint64 position, Uint64 length)
        const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ch
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstOf(char ch, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastOf(const String& other, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastOf(const std::string& other, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastOf(const char* other, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastOf(const char* other, Uint64 position, Uint64 length) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ch
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastOf(char ch, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstNotOf(const String& other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstNotOf(const std::string& other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstNotOf(const char* other, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstNotOf(const char* other, Uint64 position, Uint64 length)
        const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ch
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findFirstNotOf(char ch, Uint64 position = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastNotOf(const String& other, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastNotOf(const std::string& other, Uint64 position = npos)
        const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastNotOf(const char* other, Uint64 position = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastNotOf(const char* other, Uint64 position, Uint64 length)
        const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 findLastNotOf(char ch, Uint64 position = npos) const;

    // ANCHOR - Information

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String substr(Uint64 position = 0, Uint64 length = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 length(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline Uint64 size(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 maxSize(void) const;

    // ANCHOR - Transform

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param size
    ///
    ///////////////////////////////////////////////////////////////////////////
    void resize(Uint64 size);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param size
    /// \param filler
    ///
    ///////////////////////////////////////////////////////////////////////////
    void resize(Uint64 size, char filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 capacity(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param n
    ///
    ///////////////////////////////////////////////////////////////////////////
    void reserve(Uint64 n = 0);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clear(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void shrinkToFit(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& toLowerCase(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& toUpperCase(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String& trim(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool isEmpty(void) const;

    // !SECTION

private:
    // ANCHOR - Private Methods

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline StringIterator _ibegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline StringIterator _rbegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline StringIterator _end(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param first
    /// \param second
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 _getLength(const ConstIterator first, const ConstIterator second);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int _compare(const String& other) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline void _append(const char* other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _append(const char* other, Uint64 length);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _insertstr(Uint64 position, const char* other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param other
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _insertstr(Uint64 position, const char* other, Uint64 length);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param buffer
    /// \param other
    /// \param position
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _substr(char*& buffer, const char* other, Uint64 position = 0,
        Uint64 length = npos) const;
    
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _erase(Uint64 position, Uint64 length);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param length
    /// \param other
    /// \param n
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _replace(Uint64 position, Uint64 length, const char* other, Uint64 n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param str
    /// \param position
    /// \param length
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 _setLength(const String& str, Uint64 position,
        Uint64 length = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param length
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 _find(const char* other, Uint64 length, Uint64 position) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param length
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 _rfind(const char* other, Uint64 length, Uint64 position) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param length
    /// \param position
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool _findCompare(const char* other, Uint64 length, Uint64 position) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param length
    /// \param position
    /// \param isTrue
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 _findFirstOf(const char* other, Uint64 length, Uint64 position,
        bool isTrue) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param length
    /// \param position
    /// \param isTrue
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint64 _findLastOf(const char* other, Uint64 length, Uint64 position,
        bool isTrue) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    /// \param length
    /// \param position
    /// \param isTrue
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool _findOfCompare(const char* other, Uint64 length, Uint64 position,
        bool isTrue) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _setLength(const Uint64 length);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param capacity
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _setCapacity(const Uint64 capacity);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param capacity
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _increaseCapacity(const Uint64 capacity);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param capacity
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _decreaseCapacity(const Uint64 capacity);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param buffer
    /// \param size
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _allocCString(char*& buffer, const Uint64 size) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param buffer
    /// \param size
    /// \param filler
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _allocCString(char*& buffer, const Uint64 size, char filler) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param buffer
    /// \param size
    /// \param first
    /// \param second
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _allocCString(char*& buffer, const Uint64 size,
        const ConstIterator first, const ConstIterator second) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param buffer
    /// \param size
    /// \param position
    /// \param filler
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _fillStr(char* other, const Uint64 length, Uint64 position,
        char filler) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _clearStr(const Uint64 position);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam F
    ///
    /// \param function
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    template<typename F>
    String& _transform(F function);

public:
    // ANCHOR - Static Methods

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param a
    /// \param b
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void swap(String& a, String& b);
};

} // namespace ax::container

///////////////////////////////////////////////////////////////////////////////
// Forward ax::container namespace
///////////////////////////////////////////////////////////////////////////////
namespace axc = ax::container;

// SECTION - Operators

// ANCHOR - Const Iterator

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator operator+(const axc::String::ConstIterator& lhs,
    Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator operator-(const axc::String::ConstIterator& lhs,
    Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
const char& operator*(const axc::String::ConstIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator& operator++(axc::String::ConstIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator operator++(axc::String::ConstIterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator& operator--(axc::String::ConstIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator operator--(axc::String::ConstIterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool operator==(const axc::String::ConstIterator& lhs,
    const axc::String::ConstIterator& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool operator!=(const axc::String::ConstIterator& lhs,
    const axc::String::ConstIterator& rhs);

// ANCHOR - Iterator

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator operator+(const axc::String::Iterator& lhs, Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator operator-(const axc::String::Iterator& lhs, Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
char& operator*(axc::String::Iterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
const char& operator*(const axc::String::Iterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator& operator++(axc::String::Iterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator operator++(axc::String::Iterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator& operator--(axc::String::Iterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator operator--(axc::String::Iterator& lhs, int);

// ANCHOR - Const Reverse Iterator

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator operator+(
    const axc::String::ConstReverseIterator& lhs, Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator operator-(
    const axc::String::ConstReverseIterator& lhs, Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
const char& operator*(const axc::String::ConstReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator& operator++(
    axc::String::ConstReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator operator++(
    axc::String::ConstReverseIterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator& operator--(
    axc::String::ConstReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator operator--(
    axc::String::ConstReverseIterator& lhs, int);

// ANCHOR - Reverse Iterator

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator operator+(const axc::String::ReverseIterator& lhs,
    Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator operator-(const axc::String::ReverseIterator& lhs,
    Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
char& operator*(axc::String::ReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
const char& operator*(const axc::String::ReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator& operator++(axc::String::ReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator operator++(axc::String::ReverseIterator& lhs,
    int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator& operator--(axc::String::ReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator operator--(axc::String::ReverseIterator& lhs,
    int);

// ANCHOR - String

bool operator==(const axc::String& lhs, const axc::String& rhs);
bool operator==(const axc::String& lhs, const std::string& rhs);
bool operator==(const axc::String& lhs, const char* rhs);
bool operator!=(const axc::String& lhs, const axc::String& rhs);
bool operator!=(const axc::String& lhs, const std::string& rhs);
bool operator!=(const axc::String& lhs, const char* rhs);
bool operator<(const axc::String& lhs, const axc::String& rhs);
bool operator<(const axc::String& lhs, const std::string& rhs);
bool operator<(const axc::String& lhs, const char* rhs);
bool operator<=(const axc::String& lhs, const axc::String& rhs);
bool operator<=(const axc::String& lhs, const std::string& rhs);
bool operator<=(const axc::String& lhs, const char* rhs);
bool operator>(const axc::String& lhs, const axc::String& rhs);
bool operator>(const axc::String& lhs, const std::string& rhs);
bool operator>(const axc::String& lhs, const char* rhs);
bool operator>=(const axc::String& lhs, const axc::String& rhs);
bool operator>=(const axc::String& lhs, const std::string& rhs);
bool operator>=(const axc::String& lhs, const char* rhs);

axc::String& operator+=(axc::String& lhs, const axc::String& rhs);
axc::String& operator+=(axc::String& lhs, const std::string& rhs);
axc::String& operator+=(axc::String& lhs, const char* rhs);
axc::String& operator+=(axc::String& lhs, char rhs);

axc::String operator+(const axc::String& lhs, const axc::String& rhs);
axc::String operator+(const axc::String& lhs, const std::string& rhs);
axc::String operator+(const std::string& lhs, const axc::String& rhs);
axc::String operator+(const axc::String& lhs, const char* rhs);
axc::String operator+(const char* lhs, const axc::String& rhs);
axc::String operator+(const axc::String& lhs, char rhs);
axc::String operator+(char lhs, const axc::String& rhs);

std::ostream& operator<<(std::ostream& lhs, const axc::String& rhs);
std::ostream& operator>>(std::ostream& lhs, axc::String& rhs);

// !SECTION

// ANCHOR - STD Functions

std::istream& getline(std::istream is, axc::String& str, char delim = '\n');

// !SECTION
