///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2024 Mallory SCOTTON
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma once
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <axiom/config.hpp>
#include <axiom/math/types.hpp>

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
#define SAFE_DELETE(x) { delete x; x = nullptr; }
#define SAFE_DELETE_ARRAY(x) { delete[] x; x = nullptr; }

///////////////////////////////////////////////////////////////////////////////
// Namespace ax::container
///////////////////////////////////////////////////////////////////////////////
namespace ax::container
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct String
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static const Uint64 npos = -1;  //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    char* m_str = nullptr;          //<!
    Uint64 m_length = 0;            //<!
    Uint64 m_cap = 0;               //<!
    Uint64 m_increaseBy = 15;       //<!

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct StringIterator
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        char* first;        //<!
        const Uint64* size; //<!
        Uint64 pos;         //<!

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param first
        /// \param size
        /// \param pos;
        ///
        ///////////////////////////////////////////////////////////////////////
        StringIterator(char* first = nullptr, const Uint64* size = nullptr,
            Uint64 pos = 0);
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct ConstIterator
    {
    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        StringIterator current;     //<!

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param iterator
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator(StringIterator iterator);

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](Int64 index) const;

    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        AXIOM_NODISCARD char& retrieve(void) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void increment(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void decrement(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param offset
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        AXIOM_NODISCARD char& randomAccess(Uint64 offset) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param toReturn
        /// \param addition
        ///
        ///////////////////////////////////////////////////////////////////////
        void add(ConstIterator& toReturn, Uint64 addition);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param toReturn
        /// \param subtraction
        ///
        ///////////////////////////////////////////////////////////////////////
        void subtract(ConstIterator& toReturn, Uint64 substraction);
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct Iterator : public ConstIterator
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param iterator
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator(StringIterator iterator);

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        char& operator[](Int64 index);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](Int64 index) const;
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct ConstReverseIterator : public ConstIterator
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param iterator
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator(StringIterator iterator);

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](Int64 index) const;

    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void increment(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void decrement(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param toReturn
        /// \param addition
        ///
        ///////////////////////////////////////////////////////////////////////
        void add(ConstReverseIterator& toReturn, Uint64 addition);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param toReturn
        /// \param subtraction
        ///
        ///////////////////////////////////////////////////////////////////////
        void subtract(ConstReverseIterator& toReturn, Uint64 subtraction);
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct ReverseIterator : public ConstReverseIterator
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param iterator
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator(StringIterator iterator);

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        char& operator[](Int64 index);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](Int64 index) const;
    };
};

} // namespace ax::container

///////////////////////////////////////////////////////////////////////////////
// Forward ax::container namespace
///////////////////////////////////////////////////////////////////////////////
namespace axc = ax::container;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator operator+(const axc::String::ConstIterator& lhs,
    Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator operator-(const axc::String::ConstIterator& lhs,
    Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
const char& operator*(const axc::String::ConstIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator& operator++(axc::String::ConstIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator operator++(axc::String::ConstIterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator& operator--(axc::String::ConstIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstIterator operator--(axc::String::ConstIterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool operator==(const axc::String::ConstIterator& lhs,
    const axc::String::ConstIterator& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool operator!=(const axc::String::ConstIterator& lhs,
    const axc::String::ConstIterator& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator operator+(const axc::String::Iterator& lhs, Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator operator-(const axc::String::Iterator& lhs, Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
char& operator*(axc::String::Iterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
const char& operator*(const axc::String::Iterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator& operator++(axc::String::Iterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator operator++(axc::String::Iterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator& operator--(axc::String::Iterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::Iterator operator--(axc::String::Iterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator operator+(
    const axc::String::ConstReverseIterator& lhs, Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator operator-(
    const axc::String::ConstReverseIterator& lhs, Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
const char& operator*(const axc::String::ConstReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator& operator++(
    axc::String::ConstReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator operator++(
    axc::String::ConstReverseIterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator& operator--(
    axc::String::ConstReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ConstReverseIterator operator--(
    axc::String::ConstReverseIterator& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator operator+(const axc::String::ReverseIterator& lhs,
    Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator operator-(const axc::String::ReverseIterator& lhs,
    Uint64 rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
char& operator*(axc::String::ReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
const char& operator*(const axc::String::ReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator& operator++(axc::String::ReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator operator++(axc::String::ReverseIterator& lhs,
    int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator& operator--(axc::String::ReverseIterator& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axc::String::ReverseIterator operator--(axc::String::ReverseIterator& lhs,
    int);
