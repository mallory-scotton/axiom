///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2024 Mallory SCOTTON
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma once
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <axiom/config.hpp>
#include <iostream>

///////////////////////////////////////////////////////////////////////////////
// Namespace ax::math
///////////////////////////////////////////////////////////////////////////////
namespace ax::math
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct Vector3
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    union
    {
        struct
        {
            float x;        //<!
            float y;        //<!
            float z;        //<!
        };
        float xyz[3];       //<!
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static const Vector3 zeroVector;        //<!
    static const Vector3 oneVector;         //<!
    static const Vector3 upVector;          //<!
    static const Vector3 downVector;        //<!
    static const Vector3 forwardVector;     //<!
    static const Vector3 backwardVector;    //<!
    static const Vector3 leftVector;        //<!
    static const Vector3 rightVector;       //<!
    static const Vector3 xAxisVector;       //<!
    static const Vector3 yAxisVector;       //<!
    static const Vector3 zAxisVector;       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vector3(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param f
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vector3(float f);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param x
    /// \param y
    /// \param z
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vector3(float x, float y, float z);
};

} // namespace ax::math

///////////////////////////////////////////////////////////////////////////////
// Forward ax::math namespace
///////////////////////////////////////////////////////////////////////////////
namespace axm = ax::math;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator+(const axm::Vector3& lhs);
AXIOM_NODISCARD axm::Vector3 operator+(const axm::Vector3& lhs,
    const axm::Vector3& rhs);
AXIOM_NODISCARD axm::Vector3 operator+(const axm::Vector3& lhs, float rhs);
AXIOM_NODISCARD axm::Vector3 operator+(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator-(const axm::Vector3& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator-(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator-(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator-(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator*(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator*(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator*(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator/(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator/(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator/(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator+=(axm::Vector3& lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator+=(axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator-=(axm::Vector3& lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator-=(axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator*=(axm::Vector3& lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator*=(axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator/=(axm::Vector3& lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator/=(axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator==(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator==(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator==(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator!=(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator!=(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator!=(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator<(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator<(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator<(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator<=(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator<=(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator<=(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator>(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator>(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator>(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator>=(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator>=(const axm::Vector3& lhs, float rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator>=(float lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator++(axm::Vector3& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator++(axm::Vector3& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator--(axm::Vector3& lhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator--(axm::Vector3& lhs, int);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD axm::Vector3 operator^(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float operator|(const axm::Vector3& lhs,
    const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
axm::Vector3& operator^=(axm::Vector3& lhs, const axm::Vector3& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& lhs, const axm::Vector3& rhs);
