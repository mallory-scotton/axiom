///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2024 Mallory SCOTTON
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma once
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <axiom/config.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace ax::math
///////////////////////////////////////////////////////////////////////////////
namespace ax::math
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param value
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T abs(T value)
{
    if (value < (T)0)
        return (-value);
    return (value);
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param value
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T sign(T value)
{
    if (value > (T)0)
        return (1);
    if (value < (T)0)
        return (-1);
    return (0);
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param a
/// \param b
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T min(T a, T b)
{
    if (a < b)
        return (a);
    return (b);
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param a
/// \param b
/// \param c
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T min(T a, T b, T c)
{
    return (min(min(a, b), c));
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param a
/// \param b
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T max(T a, T b)
{
    if (b < a)
        return (a);
    return (b);
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param a
/// \param b
/// \param c
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T max(T a, T b, T c)
{
    return (max(max(a, b), c));
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param value
/// \param minValue
/// \param maxValue
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T clamp(T value, T minValue, T maxValue)
{
    return (max(min(value, maxValue), minValue));
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param x
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T square(T x)
{
    return (x * x);
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param x
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template<typename T>
AXIOM_NODISCARD T cube(T x)
{
    return (x * x * x);
}

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param x
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float sqrt(float x);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param x
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD double sqrt(double x);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param x
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float invSqrt(float x);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param x
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD double invSqrt(double x);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param x
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float round(float x);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param x
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD double round(double x);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param radians
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float radiansToDegrees(float radians);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param radians
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD double radiansToDegrees(double radians);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param degrees
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float degreesToRadians(float degrees);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param degrees
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD double degreesToRadians(double degrees);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param angle
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float unwindRadians(float angle);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param angle
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD double unwindRadians(double angle);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param angle
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float unwindDegrees(float angle);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param angle
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD double unwindDegrees(double angle);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param a
/// \param b
/// \param alpha
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD float lerp(float a, float b, float alpha);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param a
/// \param b
/// \param alpha
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD double lerp(double a, double b, double alpha);

} // namespace ax::math
