///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2024 Mallory SCOTTON
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma once
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <axiom/graphics/dependencies.hpp>
#include <axiom/math/rotator.hpp>
#include <axiom/math/vector3.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace ax::graphics
///////////////////////////////////////////////////////////////////////////////
namespace ax::graphics
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct Camera
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    axm::Vector3 position;  //<!
    axm::Vector3 up;        //<!
    axm::Vector3 right;     //<!
    axm::Vector3 forward;   //<!
    float focalDistance;    //<!
    float aperture;         //<!
    float fov;              //<!
    bool isMoving;          //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    axm::Vector3 m_worldUp; //<!
    axm::Vector3 m_pivot;   //<!
    axm::Rotator m_rotator; //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param eye
    /// \param lookAt
    /// \param fov
    ///
    ///////////////////////////////////////////////////////////////////////////
    Camera(const axm::Vector3& eye, const axm::Vector3 lookAt, float fov);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    Camera(const Camera& other);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Camera& operator=(const Camera& other);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param dx
    /// \param dy
    ///
    ///////////////////////////////////////////////////////////////////////////
    void offsetOrientation(float dx, float dy);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param dx
    /// \param dy
    ///
    ///////////////////////////////////////////////////////////////////////////
    void strafe(float dx, float dy);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param radius
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setRadius(float radius);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param view
    /// \param projection
    /// \param ratio
    ///
    ///////////////////////////////////////////////////////////////////////////
    void computeViewProjectionMatrix(float* view, float* projection,
        float ratio);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setFov(float value);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void updateCamera(void);
};

} // namespace ax::graphics
