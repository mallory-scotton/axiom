///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2024 Mallory SCOTTON
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma once
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <axiom/graphics/dependencies.hpp>
#include <axiom/math/types.hpp>

#include <axiom/math/color.hpp>
#include <axiom/math/linearColor.hpp>

///////////////////////////////////////////////////////////////////////////////
// Forward ax::math namespace
///////////////////////////////////////////////////////////////////////////////
namespace axm = ax::math;

///////////////////////////////////////////////////////////////////////////////
// Namespace ax::graphics
///////////////////////////////////////////////////////////////////////////////
namespace ax::graphics
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct FrameBuffer
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    GLuint m_fboId;     //<!
    Uint32 m_width;     //<!
    Uint32 m_height;    //<!
    bool m_isComplete;  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param width
    /// \param height
    ///
    ///////////////////////////////////////////////////////////////////////////
    FrameBuffer(Uint32 width, Uint32 height);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    FrameBuffer(const FrameBuffer&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    FrameBuffer(FrameBuffer&& other);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~FrameBuffer(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    FrameBuffer& operator=(const FrameBuffer&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    FrameBuffer& operator=(FrameBuffer&& other);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void bind(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void unbind(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clear(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param color
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clear(const axm::Color& color);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param color
    ///
    ///////////////////////////////////////////////////////////////////////////
    void clear(const axm::LinearColor& color);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool isComplete(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint32 getWith(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint32 getHeight(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param width
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setWith(Uint32 width);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param height
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setHeight(Uint32 height);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param width
    /// \param height
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setSize(Uint32 width, Uint32 height);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param object
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void bind(GLuint object);
};

} // namespace ax::graphics
