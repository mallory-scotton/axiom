///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2024 Mallory SCOTTON
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma once
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <axiom/math/types.hpp>
#include <axiom/config.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace ax::window
///////////////////////////////////////////////////////////////////////////////
namespace ax::window
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct VideoMode
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Uint32 width;               //<! Video mode width, in pixels
    Uint32 height;              //<! Video mode height, in pixels
    Uint32 bitsPerPixel{};      //<! Video mode pixel depth, in bits/pixels

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    VideoMode(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param width
    /// \param height
    /// \param modeBitsPerPixel
    ///
    ///////////////////////////////////////////////////////////////////////////
    VideoMode(Uint32 width, Uint32 height, Uint32 modeBitsPerPixel = 32);
};

} // namespace ax::window

///////////////////////////////////////////////////////////////////////////////
// Forward ax::math namespace
///////////////////////////////////////////////////////////////////////////////
namespace axw = ax::window;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator==(axw::VideoMode& lhs, axw::VideoMode& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator!=(axw::VideoMode& lhs, axw::VideoMode& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator>(axw::VideoMode& lhs, axw::VideoMode& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator>=(axw::VideoMode& lhs, axw::VideoMode& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator<(axw::VideoMode& lhs, axw::VideoMode& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
AXIOM_NODISCARD bool operator<=(axw::VideoMode& lhs, axw::VideoMode& rhs);
